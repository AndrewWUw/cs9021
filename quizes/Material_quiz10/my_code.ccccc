/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *
 * Description: Takes +s and digits as command line arguments, checks whether  *
 *              they make up a valid infix expression, and evaluates it        *
 *              in case it is.                                                 *
 *                                                                             *
 * Written by ***         for COMP9021                                         *
 *                                                                             *
 * Other source files, if any, one per line, starting on the next line:        *
 *       tailored_stack.c                                                      *
 *       quiz10.c                                                              *
 * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */

/* THIS IS THE ONLY FILE YOU HAVE TO SUBMIT.
 * IT WILL BE COMPILED WITH THE OTHER FILES YOU HAVE BEEN PROVIDED WITH. */

#include "my_code.h"

void store_command_line_args_in_stack(int argc, char **argv,
        Stack * const pt_to_stack) {
    for (int i = 1; i < argc; ++i)
        push(argv[i][0], pt_to_stack);
    return;
}

bool is_correct_prefix_expression(Stack * const pt_to_stack) {
    int n = stack_height(pt_to_stack);
    char expression;
    int nb_of_value = 0;
    for (int i = n - 1; i >= 0; --i) {
        expression = pt_to_stack->pt_to_bottom[i];
        if (isdigit(expression))
            nb_of_value++;
        else if (expression == '+') {
            if (nb_of_value < 2)
                return false;
            else
                nb_of_value--;
        }
    }
    if (nb_of_value == 1)
        return true;
    return false;
}

Value evaluate_expression(Stack * const pt_to_stack) {
    int n = stack_height(pt_to_stack);
    Value value_1;
    Value value_2;
    char expression;
    Stack digits_stack;
    initialise_stack(&digits_stack);
    for (int i = 0; i < n; ++i)
        if (isdigit(pt_to_stack->pt_to_bottom[i]))
            push(pt_to_stack->pt_to_bottom[i] - '0', &digits_stack);
    for (int i = n - 1; i >= 0; --i) {
        if (pt_to_stack->pt_to_bottom[i] == '+') {
            pop(&digits_stack, &value_1);
            pop(&digits_stack, &value_2);
            push((value_1) + (value_2), &digits_stack);
        }
    }
    pop(&digits_stack, &value_1);
    empty_stack(&digits_stack);
    return value_1;
}
